1.
DGEMV realiza un de las operaciones matriz-vector

y := alpha*A*x + beta*y	贸 y := alpha*A**T*x + beta*y

donde alpha y beta son escalares, x y y son vectores y A es una matriz de mxn. 

subroutine dgemv(	character  				TRANS,
			integer  				M,
			integer  				N,
			double precision  			ALPHA,
			double precision, dimension(lda,*)  	A,
			integer  				LDA,
			double precision, dimension(*)  	X,
			integer  				INCX,
			double precision  			BETA,
			double precision, dimension(*)  	Y,
			integer  				INCY 
			)

- TRANS es un caracter que especifica que operacion se realizara de la siguiente manera:
'N' or 'n'   y := alpha*A*x + beta*y.
'T' or 't'   y := alpha*A**T*x + beta*y.
'C' or 'c'   y := alpha*A**T*x + beta*y. 	
- M es un integer que especifica el numero de filas de la matriz A. Debe ser al menos 0.
- N es un integer que especifica el numero de columnas de la matriz A. Debe ser al menos 0.
- ALPHA es un double, que indica el escalar alpha
- A es un double precision array de dimension (LDA, N). Antes de entrar, la parte delantera m por n parte del arreglo A debe contener la matriz de coeficientes.
- LDA es un integer. Al entrar, LDA especifica la primera dimension de A como se declaro en la llamada del (sub) programa. LDA debe ser al menos max(1, m)
- X es un double precision array, de dimension ( 1 + (n - 1)*abs(INCX)) cuando TRANS = 'N' o 'n' y al menos (1 + (m - 1)*abs(INCX)) de otra manera. ANtes de entrar, el arreglo incrementado X debe contener al vector x
- INCX es un integer. Al entrar, INCX especifica el incremento para los elementos de X. INCX no debe ser zero.
- BETA es un double precision. Al entrar, BETA especifica el escalar beta.  Cuando BETA es 0 entonces Y no necesita ser ingresado.
- Y es un double precision array, de dimension por lo menos ( 1 + (m - 1)*abs(INCY)) cuando TRANS = 'N' o 'n' y al menos (1 + ( n - 1)*abs(INCY)) de otra manera. Antes de entrar con BETA diferente de cero, el arreglo incrementado Y debe contener al vector y. Al salir, Y es sobreescrito por el vector actualizado y.
- INCY es un integer. Al entrar, INCY especifica el incremento para los elementos de Y. INCY no puede ser 0.

2. 
batu@BatuCompu:~/Documents/metodos_numericos_y_optimizacion/tarea6$ ./programa.out 4 3
matriz 1:
matriz[0][0]=2.00000	matriz[0][1]=3.70000	matriz[0][2]=6.00000
matriz[1][0]=-1.00000	matriz[1][1]=-7.00000	matriz[1][2]=0.90000
matriz[2][0]=-1.00000	matriz[2][1]=7.50000	matriz[2][2]=-8.90000
matriz[3][0]=0.00000	matriz[3][1]=1.00000	matriz[3][2]=0.00000
------------
vector :
vector[0]=2.00000
vector[1]=8.00000
vector[2]=4.00000
------------
vector resultado:
vector[0]=57.60000
vector[1]=-54.40000
vector[2]=22.40000
vector[3]=8.00000

batu@BatuCompu:~/Documents/metodos_numericos_y_optimizacion/tarea6/dgemv$ ./programa.out 2 2
matriz 1:
matriz[0][0]=1.00000	matriz[0][1]=2.00000
matriz[1][0]=2.00000	matriz[1][1]=1.00000
------------
vector :
vector[0]=100.00000
vector[1]=200.00000
------------
vector resultado:
vector[0]=500.00000
vector[1]=400.00000


3. 
batu@BatuCompu:~/Documents/metodos_numericos_y_optimizacion/tarea6/dger$ ./programa.out 4 3
matriz 1:
matriz[0][0]=2.00000	matriz[0][1]=3.70000	matriz[0][2]=6.00000
matriz[1][0]=-1.00000	matriz[1][1]=-7.00000	matriz[1][2]=0.90000
matriz[2][0]=-1.00000	matriz[2][1]=7.50000	matriz[2][2]=-8.90000
matriz[3][0]=0.00000	matriz[3][1]=1.00000	matriz[3][2]=0.00000
------------
vector :
vector[0]=2.00000
vector[1]=8.00000
vector[2]=4.00000
vector[3]=5.00000
------------
vector :
vector[0]=2.00000
vector[1]=8.00000
vector[2]=4.00000
------------
matriz resultado:
matriz[0][0]=6.00000	matriz[0][1]=19.70000	matriz[0][2]=14.00000
matriz[1][0]=15.00000	matriz[1][1]=57.00000	matriz[1][2]=32.90000
matriz[2][0]=7.00000	matriz[2][1]=39.50000	matriz[2][2]=7.10000
matriz[3][0]=10.00000	matriz[3][1]=41.00000	matriz[3][2]=20.00000

batu@BatuCompu:~/Documents/metodos_numericos_y_optimizacion/tarea6/dger$ ./programa.out 2 2
matriz 1:
matriz[0][0]=32.50000	matriz[0][1]=32.37000
matriz[1][0]=-10.00000	matriz[1][1]=7.50000
------------
vector :
vector[0]=0.20000
vector[1]=3.80000
------------
vector :
vector[0]=67.89200
vector[1]=5.00000
------------
matriz resultado:
matriz[0][0]=46.07840	matriz[0][1]=33.37000
matriz[1][0]=247.98960	matriz[1][1]=26.50000

4.
Esto es debido a que en el archivo definiciones.h, en la parte arreglo2d, se realiza el cambio a column major cuando se relaiza este define: #define entrada(arreglo,i,j) ((arreglo)->arr[j*m+i]) 

5. 
DGEMM  realiza una de las operaciones matriz-matriz

    C := alpha*op( A )*op( B ) + beta*C,

donde  op( X ) es 

    op( X ) = X   贸   op( X ) = X**T,

alpha y beta son escalares, y A, B y C son matrices, con op(A) siendo una matriz m por k, op(B) una matriz k por n y C una matriz m por n.

subroutine dgemm( 	character  				TRANSA,
			character  				TRANSB,
			integer  				M,
			integer  				N,
			integer  				K,
			double precision  			ALPHA,
			double precision, dimension(lda,*)  	A,
			integer  				LDA,
			double precision, dimension(ldb,*)  	B,
			integer  				LDB,
			double precision  			BETA,
			double precision, dimension(ldc,*)  	C,
			integer  				LDC 
			)

- TRANSA es un character, al entrar, especifica la forma de op(A) a ser usada en la multiplicaci贸n de matriz de la siguiente manera:
'N' o 'n',  op( A ) = A.
'T' o 't',  op( A ) = A**T.
'C' o 'c',  op( A ) = A**T.
- TRANSB es un character, al entrar, especifica la forma de op(B) a ser usada en la multiplicaci贸n de matriz de la siguiente manera:
'N' or 'n',  op( B ) = B.
'T' or 't',  op( B ) = B**T.
'C' or 'c',  op( B ) = B**T.
- M es un integer, al entrar, especifica el numero de filas de la matriz op(A) y de la matriz C. M debe ser al menos zero.
- N es un integer, al entrar, especifica el numero de columnas de la matriz op(B) y el numero de columnas de la matriz C. N debe ser al menos zero.
- K es un integer, al entrar, especifica el numero de columnas de la matriz op(A) y el numero de filas de la matriz op(B). K debe ser al menos zero.
- ALPHA es un double rpecision, al entrar, especifica el escalar alpha.	
- A es un double precision array, dimension (LDA, ka), DONDE KA ES K CUANDO transa = 'N' o 'n', y es m de otra manera. Antes de entrar con TRANSA = 'N' o 'n', la parte delantera m por k de arreglo A debe contener la matriz A, de otra manera la parte delantera k por m del arreglo A debe contener la matriz A.
- LDA es un integer, al entrar, especifica la primera dimension de A como fue declarada en el (sub) programa. Cuando TRANS = 'N' o 'n' entonces LDA debe de ser al menos max(1, m), de otra manera LDA debe al menor ser max(1,k)
- B es un double precision array, dimension (LDB, kb), donde kb es n cuando TRANSB = 'N' o 'n', la parte delantera k por n del arreglo B debe contener a la matriz B, de otra manera, la parte delantera n por k del arreglo B debe contener a la matriz B.
- LDB es un integer, al entrar, LDB especifica la primera dimension de B como se declaro en el (sub) programa. Cuando TRANSB = 'N' o 'n' entonces LDB debe ser al menos max(1,k), de otra manera LDB debe ser al menos max(1,n).
- BETA es un double precision, al entrar, especifica el escalar beta. Cuando BETA es zero, entonces C no necesita ser ingresado.
- C es un double precision array, dimension (LDC,N). Antes de entrar, la parte delantera m por n del arreglo C debe contener a la matriz C, escepto cuando beta es zero, en cuyo caso C no necesita ser ingresado. Al salir, el arreglo C es sobreescrito por la matriz m por n ( alpha*op( A )*op( B ) + beta*C ).           .
- LDC es un integer, al entrar, especifica la primera dimension de C como se declaro en el el (sub) programa. LDC debe ser al menos max(1,m).

6. 
batu@BatuCompu:~/Documents/metodos_numericos_y_optimizacion/tarea6/dgemm$ ./programa.out 3 2 2 3
matriz 1:
matriz[0][0]=0.00000	matriz[0][1]=1.50000
matriz[1][0]=4.00000	matriz[1][1]=-5.00000
matriz[2][0]=-1.00000	matriz[2][1]=2.50000
------------
matriz 2:
matriz[0][0]=1.00000	matriz[0][1]=0.00000	matriz[0][2]=0.00000
matriz[1][0]=0.00000	matriz[1][1]=-1.00000	matriz[1][2]=1.00000
------------
matriz resultado:
matriz[0][0]=0.00000	matriz[0][1]=-1.50000	matriz[0][2]=1.50000
matriz[1][0]=4.00000	matriz[1][1]=5.00000	matriz[1][2]=-5.00000
matriz[2][0]=-1.00000	matriz[2][1]=-2.50000	matriz[2][2]=2.50000

batu@BatuCompu:~/Documents/metodos_numericos_y_optimizacion/tarea6/dgemm$ ./programa.out 5 2 2 5
matriz 1:
matriz[0][0]=56.00000	matriz[0][1]=0.01000
matriz[1][0]=0.00000	matriz[1][1]=-2.10000
matriz[2][0]=-0.05000	matriz[2][1]=23.00000
matriz[3][0]=4.10000	matriz[3][1]=-3.40000
matriz[4][0]=6.10000	matriz[4][1]=0.00000
------------
matriz 2:
matriz[0][0]=1.00000	matriz[0][1]=0.10000	matriz[0][2]=2.30000	matriz[0][3]=4.50000	matriz[0][4]=60.00000
matriz[1][0]=-1.00000	matriz[1][1]=10.00000	matriz[1][2]=-100.00000	matriz[1][3]=10.01000	matriz[1][4]=4.90000
------------
matriz resultado:
matriz[0][0]=55.99000	matriz[0][1]=5.70000	matriz[0][2]=127.80000	matriz[0][3]=252.10010	matriz[0][4]=3360.04900
matriz[1][0]=2.10000	matriz[1][1]=-21.00000	matriz[1][2]=210.00000	matriz[1][3]=-21.02100	matriz[1][4]=-10.29000
matriz[2][0]=-23.05000	matriz[2][1]=229.99500	matriz[2][2]=-2300.11500	matriz[2][3]=230.00500	matriz[2][4]=109.70000
matriz[3][0]=7.50000	matriz[3][1]=-33.59000	matriz[3][2]=349.43000	matriz[3][3]=-15.58400	matriz[3][4]=229.34000
matriz[4][0]=6.10000	matriz[4][1]=0.61000	matriz[4][2]=14.03000	matriz[4][3]=27.45000	matriz[4][4]=366.00000

batu@BatuCompu:~/Documents/metodos_numericos_y_optimizacion/tarea6/dgemm$ ./programa.out 5 2 2 6
matriz 1:
matriz[0][0]=56.00000	matriz[0][1]=0.01000
matriz[1][0]=0.00000	matriz[1][1]=-2.10000
matriz[2][0]=-0.05000	matriz[2][1]=23.00000
matriz[3][0]=4.10000	matriz[3][1]=-3.40000
matriz[4][0]=6.10000	matriz[4][1]=0.00000
------------
matriz 2:
matriz[0][0]=1.00000	matriz[0][1]=0.10000	matriz[0][2]=2.30000	matriz[0][3]=4.50000	matriz[0][4]=60.00000	matriz[0][5]=1.00000
matriz[1][0]=-1.00000	matriz[1][1]=10.00000	matriz[1][2]=-100.00000	matriz[1][3]=10.01000	matriz[1][4]=4.90000	matriz[1][5]=1.00000
------------
matriz resultado:
matriz[0][0]=55.99000	matriz[0][1]=5.70000	matriz[0][2]=127.80000	matriz[0][3]=252.10010	matriz[0][4]=3360.04900	matriz[0][5]=56.01000
matriz[1][0]=2.10000	matriz[1][1]=-21.00000	matriz[1][2]=210.00000	matriz[1][3]=-21.02100	matriz[1][4]=-10.29000	matriz[1][5]=-2.10000
matriz[2][0]=-23.05000	matriz[2][1]=229.99500	matriz[2][2]=-2300.11500	matriz[2][3]=230.00500	matriz[2][4]=109.70000	matriz[2][5]=22.95000
matriz[3][0]=7.50000	matriz[3][1]=-33.59000	matriz[3][2]=349.43000	matriz[3][3]=-15.58400	matriz[3][4]=229.34000	matriz[3][5]=0.70000
matriz[4][0]=6.10000	matriz[4][1]=0.61000	matriz[4][2]=14.03000	matriz[4][3]=27.45000	matriz[4][4]=366.00000	matriz[4][5]=6.10000

7.
batu@BatuCompu:~/Documents/metodos_numericos_y_optimizacion/tarea6/dgemm_trick$ ./programa.out 3 2 2 3
matriz 1:
matriz[0][0]=0.00000	matriz[0][1]=1.50000
matriz[1][0]=4.00000	matriz[1][1]=-5.00000
matriz[2][0]=-1.00000	matriz[2][1]=2.50000
------------
matriz 2:
matriz[0][0]=1.00000	matriz[0][1]=0.00000	matriz[0][2]=0.00000
matriz[1][0]=0.00000	matriz[1][1]=-1.00000	matriz[1][2]=1.00000
matriz 3:
matriz[0][0]=0.00000	matriz[0][1]=-1.50000	matriz[0][2]=1.50000
matriz[1][0]=4.00000	matriz[1][1]=5.00000	matriz[1][2]=-5.00000
matriz[2][0]=-1.00000	matriz[2][1]=-2.50000	matriz[2][2]=2.50000

batu@BatuCompu:~/Documents/metodos_numericos_y_optimizacion/tarea6/dgemm_trick$ ./programa.out 4 4 4 3
matriz 1:
matriz[0][0]=0.00000	matriz[0][1]=1.50000	matriz[0][2]=6.00000	matriz[0][3]=5.00000
matriz[1][0]=4.00000	matriz[1][1]=-5.00000	matriz[1][2]=6.00000	matriz[1][3]=5.00000
matriz[2][0]=-1.00000	matriz[2][1]=2.50000	matriz[2][2]=6.00000	matriz[2][3]=5.00000
matriz[3][0]=6.00000	matriz[3][1]=8.90000	matriz[3][2]=-1.00000	matriz[3][3]=-0.01000
------------
matriz 2:
matriz[0][0]=1.00000	matriz[0][1]=2.00000	matriz[0][2]=1.00000
matriz[1][0]=0.00000	matriz[1][1]=-1.00000	matriz[1][2]=10.00000
matriz[2][0]=1.00000	matriz[2][1]=3.50000	matriz[2][2]=2.00000
matriz[3][0]=0.00000	matriz[3][1]=-1.00000	matriz[3][2]=-24.00000
matriz 3:
matriz[0][0]=6.00000	matriz[0][1]=14.50000	matriz[0][2]=-93.00000
matriz[1][0]=10.00000	matriz[1][1]=29.00000	matriz[1][2]=-154.00000
matriz[2][0]=5.00000	matriz[2][1]=11.50000	matriz[2][2]=-84.00000
matriz[3][0]=5.00000	matriz[3][1]=-0.39000	matriz[3][2]=93.24000

En el archivo definiciones.h se realizo un cambio a la siguiente definicion: #define entrada(arreglo,i,j) ((arreglo)->arr[j*m+i]), por lo que al llamar la subrutina que leera la matriz de la forma row major, los valores de M y N y las matrices A y B estan invertidas. Es por estas razones que el "trick" funciona y da los valores correctos.

8. 
batu@BatuCompu:~/Documents/metodos_numericos_y_optimizacion/tarea6/dsymm$ ./programa.out 5 5 5 2
ALPHA: 1.000000
BETA: 0.000000
matriz 1:
matriz[0][0]=1.00000	matriz[0][1]=2.00000	matriz[0][2]=3.00000	matriz[0][3]=4.00000	matriz[0][4]=5.00000
matriz[1][0]=2.00000	matriz[1][1]=3.00000	matriz[1][2]=4.00000	matriz[1][3]=5.00000	matriz[1][4]=6.00000
matriz[2][0]=3.00000	matriz[2][1]=4.00000	matriz[2][2]=5.00000	matriz[2][3]=6.00000	matriz[2][4]=7.00000
matriz[3][0]=4.00000	matriz[3][1]=5.00000	matriz[3][2]=6.00000	matriz[3][3]=6.00000	matriz[3][4]=8.00000
matriz[4][0]=5.00000	matriz[4][1]=6.00000	matriz[4][2]=7.00000	matriz[4][3]=8.00000	matriz[4][4]=7.00000
------------
matriz 2:
matriz[0][0]=1.00000	matriz[0][1]=-1.00000
matriz[1][0]=-10.00000	matriz[1][1]=10.00000
matriz[2][0]=100.00000	matriz[2][1]=-100.00000
matriz[3][0]=-10.01000	matriz[3][1]=10.01000
matriz[4][0]=4.90000	matriz[4][1]=-4.90000
------------
matriz 3:
matriz[0][0]=1.00000	matriz[0][1]=1.00000
matriz[1][0]=10.00000	matriz[1][1]=10.00000
matriz[2][0]=100.00000	matriz[2][1]=100.00000
matriz[3][0]=10.01000	matriz[3][1]=10.01000
matriz[4][0]=1.10000	matriz[4][1]=1.10000
------------
matriz resultado:
matriz[0][0]=265.46000	matriz[0][1]=-265.46000
matriz[1][0]=351.35000	matriz[1][1]=-351.35000
matriz[2][0]=437.24000	matriz[2][1]=-437.24000
matriz[3][0]=533.14000	matriz[3][1]=-533.14000
matriz[4][0]=599.22000	matriz[4][1]=-599.22000

batu@BatuCompu:~/Documents/metodos_numericos_y_optimizacion/tarea6/dsymm$ ./programa.out 5 5 5 2
ALPHA: 1.000000
BETA: 1.000000
matriz 1:
matriz[0][0]=1.00000	matriz[0][1]=2.00000	matriz[0][2]=3.00000	matriz[0][3]=4.00000	matriz[0][4]=5.00000
matriz[1][0]=2.00000	matriz[1][1]=3.00000	matriz[1][2]=4.00000	matriz[1][3]=5.00000	matriz[1][4]=6.00000
matriz[2][0]=3.00000	matriz[2][1]=4.00000	matriz[2][2]=5.00000	matriz[2][3]=6.00000	matriz[2][4]=7.00000
matriz[3][0]=4.00000	matriz[3][1]=5.00000	matriz[3][2]=6.00000	matriz[3][3]=6.00000	matriz[3][4]=8.00000
matriz[4][0]=5.00000	matriz[4][1]=6.00000	matriz[4][2]=7.00000	matriz[4][3]=8.00000	matriz[4][4]=7.00000
------------
matriz 2:
matriz[0][0]=1.00000	matriz[0][1]=-1.00000
matriz[1][0]=-10.00000	matriz[1][1]=10.00000
matriz[2][0]=100.00000	matriz[2][1]=-100.00000
matriz[3][0]=-10.01000	matriz[3][1]=10.01000
matriz[4][0]=4.90000	matriz[4][1]=-4.90000
------------
matriz 3:
matriz[0][0]=1.00000	matriz[0][1]=1.00000
matriz[1][0]=10.00000	matriz[1][1]=10.00000
matriz[2][0]=100.00000	matriz[2][1]=100.00000
matriz[3][0]=10.01000	matriz[3][1]=10.01000
matriz[4][0]=1.10000	matriz[4][1]=1.10000
------------
matriz resultado:
matriz[0][0]=266.46000	matriz[0][1]=-264.46000
matriz[1][0]=361.35000	matriz[1][1]=-341.35000
matriz[2][0]=537.24000	matriz[2][1]=-337.24000
matriz[3][0]=543.15000	matriz[3][1]=-523.13000
matriz[4][0]=600.32000	matriz[4][1]=-598.12000








